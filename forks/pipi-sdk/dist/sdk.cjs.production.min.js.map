{"version":3,"file":"sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\r\n\r\n// exports for external consumption\r\nexport type BigintIsh = JSBI | bigint | string\r\n\r\nexport enum ChainId {\r\n  HECO_MAINNET = 128,\r\n  HECO_TESTNET = 256,\r\n  OEC_MAINNET = 66\r\n}\r\n\r\nexport enum TradeType {\r\n  EXACT_INPUT,\r\n  EXACT_OUTPUT\r\n}\r\n\r\nexport enum Rounding {\r\n  ROUND_DOWN,\r\n  ROUND_HALF_UP,\r\n  ROUND_UP\r\n}\r\n\r\nexport const FACTORY_ADDRESS = {\r\n  [ChainId.HECO_MAINNET]: '0xb0da7a82e0ed8827d8e4f0142ed3fac7267ac76e',\r\n  [ChainId.HECO_TESTNET]: '0xb0da7a82e0ed8827d8e4f0142ed3fac7267ac76e',\r\n  [ChainId.OEC_MAINNET]: '0x0dDF434108DF168b347428De9C8F595471364A48'\r\n}\r\n\r\nexport const INIT_CODE_HASH = {\r\n  [ChainId.HECO_MAINNET]: '0x027960b0c056d8d79af00ab060189d77676d39cf76d170490c80bf265d96cea6',\r\n  [ChainId.HECO_TESTNET]: '0x027960b0c056d8d79af00ab060189d77676d39cf76d170490c80bf265d96cea6',\r\n  [ChainId.OEC_MAINNET]: '0x39049b80b4bd4fa78c175418c9994a334451144332c03e8b77b994857fc62178'\r\n}\r\n\r\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\r\n\r\n// exports for internal consumption\r\nexport const ZERO = JSBI.BigInt(0)\r\nexport const ONE = JSBI.BigInt(1)\r\nexport const TWO = JSBI.BigInt(2)\r\nexport const THREE = JSBI.BigInt(3)\r\nexport const FIVE = JSBI.BigInt(5)\r\nexport const TEN = JSBI.BigInt(10)\r\nexport const _100 = JSBI.BigInt(100)\r\nexport const _998 = JSBI.BigInt(998)\r\nexport const _1000 = JSBI.BigInt(1000)\r\n\r\nexport enum SolidityType {\r\n  uint8 = 'uint8',\r\n  uint256 = 'uint256'\r\n}\r\n\r\nexport const SOLIDITY_TYPE_MAXIMA = {\r\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\r\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\r\n}\r\n","// see https://stackoverflow.com/a/41102306\r\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\r\n\r\n/**\r\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\r\n * obtained by sending any amount of input.\r\n */\r\nexport class InsufficientReservesError extends Error {\r\n  public readonly isInsufficientReservesError: true = true\r\n\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\r\n  }\r\n}\r\n\r\n/**\r\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\r\n * than the price of a single unit of output after fees.\r\n */\r\nexport class InsufficientInputAmountError extends Error {\r\n  public readonly isInsufficientInputAmountError: true = true\r\n\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport warning from 'tiny-warning'\r\nimport JSBI from 'jsbi'\r\nimport { getAddress } from '@ethersproject/address'\r\n\r\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA, ChainId } from './constants'\r\n\r\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\r\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\r\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\r\n}\r\n\r\n// warns if addresses are not checksummed\r\nexport function validateAndParseAddress(address: string): string {\r\n  try {\r\n    const checksummedAddress = getAddress(address)\r\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\r\n    return checksummedAddress\r\n  } catch (error) {\r\n    invariant(false, `${address} is not a valid address.`)\r\n  }\r\n}\r\n\r\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\r\n  return bigintIsh instanceof JSBI\r\n    ? bigintIsh\r\n    : typeof bigintIsh === 'bigint'\r\n    ? JSBI.BigInt(bigintIsh.toString())\r\n    : JSBI.BigInt(bigintIsh)\r\n}\r\n\r\n// mock the on-chain sqrt function\r\nexport function sqrt(y: JSBI): JSBI {\r\n  validateSolidityTypeInstance(y, SolidityType.uint256)\r\n  let z: JSBI = ZERO\r\n  let x: JSBI\r\n  if (JSBI.greaterThan(y, THREE)) {\r\n    z = y\r\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\r\n    while (JSBI.lessThan(x, z)) {\r\n      z = x\r\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\r\n    }\r\n  } else if (JSBI.notEqual(y, ZERO)) {\r\n    z = ONE\r\n  }\r\n  return z\r\n}\r\n\r\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\r\n// `maxSize` by removing the last item\r\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\r\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\r\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\r\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\r\n\r\n  // short circuit first item add\r\n  if (items.length === 0) {\r\n    items.push(add)\r\n    return null\r\n  } else {\r\n    const isFull = items.length === maxSize\r\n    // short circuit if full and the additional item does not come before the last item\r\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\r\n      return add\r\n    }\r\n\r\n    let lo = 0,\r\n      hi = items.length\r\n\r\n    while (lo < hi) {\r\n      const mid = (lo + hi) >>> 1\r\n      if (comparator(items[mid], add) <= 0) {\r\n        lo = mid + 1\r\n      } else {\r\n        hi = mid\r\n      }\r\n    }\r\n    items.splice(lo, 0, add)\r\n    return isFull ? items.pop()! : null\r\n  }\r\n}\r\n\r\nexport const getInitCodeHash = (chainId: ChainId) => {\r\n  switch (chainId) {\r\n    case ChainId.HECO_MAINNET:\r\n      return '0xd805d4c8a7fb3567167020352386905de5d4bd188fe2284675e3ed584653df75'\r\n    case ChainId.OEC_MAINNET:\r\n      return '0x39049b80b4bd4fa78c175418c9994a334451144332c03e8b77b994857fc62178'\r\n    default:\r\n      return '0xd805d4c8a7fb3567167020352386905de5d4bd188fe2284675e3ed584653df75'\r\n  }\r\n}\r\n\r\nexport const getFactoryAddress = (chainId: ChainId) => {\r\n  switch (chainId) {\r\n    case ChainId.HECO_MAINNET:\r\n      return '0x979efE7cA072b72d6388f415d042951dDF13036e'\r\n    case ChainId.OEC_MAINNET:\r\n      return '0x0dDF434108DF168b347428De9C8F595471364A48'\r\n    default:\r\n      return '0x979efE7cA072b72d6388f415d042951dDF13036e'\r\n  }\r\n}\r\n","import JSBI from 'jsbi'\r\n\r\nimport { ChainId, SolidityType } from '../constants'\r\nimport { validateSolidityTypeInstance } from '../utils'\r\n\r\n/**\r\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\r\n *\r\n * The only instance of the base class `Currency` is Ether.\r\n */\r\nexport class Currency {\r\n  public readonly decimals: number\r\n  public readonly symbol?: string\r\n  public readonly name?: string\r\n\r\n  /**\r\n   * The only instance of the base class `Currency`.\r\n   */\r\n  public static readonly ETHER: Currency = new Currency(18, 'HT', 'HUOBI')\r\n  public static readonly HT: Currency = new Currency(18, 'HT', 'HUOBI')\r\n  public static readonly OKT: Currency = new Currency(18, 'OKT', 'OKEX')\r\n\r\n  /**\r\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\r\n   * @param decimals decimals of the currency\r\n   * @param symbol symbol of the currency\r\n   * @param name of the currency\r\n   */\r\n  protected constructor(decimals: number, symbol?: string, name?: string) {\r\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\r\n\r\n    this.decimals = decimals\r\n    this.symbol = symbol\r\n    this.name = name\r\n  }\r\n}\r\n\r\nconst ETHER = (chainId: ChainId) => {\r\n  if (chainId === ChainId.HECO_MAINNET) return Currency.HT\r\n  if (chainId === ChainId.OEC_MAINNET) return Currency.OKT\r\n  return Currency.HT\r\n}\r\n\r\nconst HT = Currency.HT\r\nconst OKT = Currency.OKT\r\nexport { ETHER, HT, OKT }\r\n","import invariant from 'tiny-invariant'\r\nimport { ChainId } from '../constants'\r\nimport { validateAndParseAddress } from '../utils'\r\nimport { Currency } from './currency'\r\n\r\n/**\r\n * Represents an ERC20 token with a unique address and some metadata.\r\n */\r\nexport class Token extends Currency {\r\n  public readonly chainId: ChainId\r\n  public readonly address: string\r\n\r\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\r\n    super(decimals, symbol, name)\r\n    this.chainId = chainId\r\n    this.address = validateAndParseAddress(address)\r\n  }\r\n\r\n  /**\r\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\r\n   * @param other other token to compare\r\n   */\r\n  public equals(other: Token): boolean {\r\n    // short circuit on reference equality\r\n    if (this === other) {\r\n      return true\r\n    }\r\n    return this.chainId === other.chainId && this.address === other.address\r\n  }\r\n\r\n  /**\r\n   * Returns true if the address of this token sorts before the address of the other token\r\n   * @param other other token to compare\r\n   * @throws if the tokens have the same address\r\n   * @throws if the tokens are on different chains\r\n   */\r\n  public sortsBefore(other: Token): boolean {\r\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\r\n    invariant(this.address !== other.address, 'ADDRESSES')\r\n    return this.address.toLowerCase() < other.address.toLowerCase()\r\n  }\r\n}\r\n\r\n/**\r\n * Compares two currencies for equality\r\n */\r\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\r\n  if (currencyA instanceof Token && currencyB instanceof Token) {\r\n    return currencyA.equals(currencyB)\r\n  } else if (currencyA instanceof Token) {\r\n    return false\r\n  } else if (currencyB instanceof Token) {\r\n    return false\r\n  } else {\r\n    return currencyA === currencyB\r\n  }\r\n}\r\n\r\nexport const WETH = {\r\n  [ChainId.HECO_MAINNET]: new Token(\r\n    ChainId.HECO_MAINNET,\r\n    '0x5545153ccfca01fbd7dd11c0b23ba694d9509a6f',\r\n    18,\r\n    'WHT',\r\n    'Wrapped HT'\r\n  ),\r\n  [ChainId.HECO_TESTNET]: new Token(\r\n    ChainId.HECO_TESTNET,\r\n    '0xb49f19289857f4499781aab9afd4a428c4be9ca8',\r\n    18,\r\n    'WHT',\r\n    'Wrapped HT'\r\n  ),\r\n  [ChainId.OEC_MAINNET]: new Token(\r\n    ChainId.OEC_MAINNET,\r\n    '0x8f8526dbfd6e38e3d8307702ca8469bae6c56c15',\r\n    18,\r\n    'WOKT',\r\n    'Wrapped OKT'\r\n  )\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport _Decimal from 'decimal.js-light'\r\nimport _Big, { RoundingMode } from 'big.js'\r\nimport toFormat from 'toformat'\r\n\r\nimport { BigintIsh, Rounding } from '../../constants'\r\nimport { ONE } from '../../constants'\r\nimport { parseBigintIsh } from '../../utils'\r\n\r\nconst Decimal = toFormat(_Decimal)\r\nconst Big = toFormat(_Big)\r\n\r\nconst toSignificantRounding = {\r\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\r\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\r\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\r\n}\r\n\r\nconst toFixedRounding = {\r\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\r\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\r\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\r\n}\r\n\r\nexport class Fraction {\r\n  public readonly numerator: JSBI\r\n  public readonly denominator: JSBI\r\n\r\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\r\n    this.numerator = parseBigintIsh(numerator)\r\n    this.denominator = parseBigintIsh(denominator)\r\n  }\r\n\r\n  // performs floor division\r\n  public get quotient(): JSBI {\r\n    return JSBI.divide(this.numerator, this.denominator)\r\n  }\r\n\r\n  // remainder after floor division\r\n  public get remainder(): Fraction {\r\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\r\n  }\r\n\r\n  public invert(): Fraction {\r\n    return new Fraction(this.denominator, this.numerator)\r\n  }\r\n\r\n  public add(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.add(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public subtract(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.subtract(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public lessThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return JSBI.lessThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public equalTo(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return JSBI.equal(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public greaterThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return JSBI.greaterThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public multiply(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.numerator),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public divide(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(this.denominator, otherParsed.numerator)\r\n    )\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\r\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\r\n\r\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\r\n    const quotient = new Decimal(this.numerator.toString())\r\n      .div(this.denominator.toString())\r\n      .toSignificantDigits(significantDigits)\r\n    return quotient.toFormat(quotient.decimalPlaces(), format)\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\r\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\r\n\r\n    Big.DP = decimalPlaces\r\n    Big.RM = toFixedRounding[rounding]\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\r\n  }\r\n}\r\n","import { currencyEquals } from '../token'\r\nimport { Currency, ETHER } from '../currency'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport _Big from 'big.js'\r\nimport toFormat from 'toformat'\r\n\r\nimport { BigintIsh, Rounding, TEN, SolidityType, ChainId } from '../../constants'\r\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\r\nimport { Fraction } from './fraction'\r\n\r\nconst Big = toFormat(_Big)\r\n\r\nexport class CurrencyAmount extends Fraction {\r\n  public readonly currency: Currency\r\n\r\n  /**\r\n   * Helper that calls the constructor with the ETHER currency\r\n   * @param amount ether amount in wei\r\n   */\r\n  public static ether(amount: BigintIsh, chainId: ChainId): CurrencyAmount {\r\n    return new CurrencyAmount(ETHER(chainId), amount)\r\n  }\r\n\r\n  // amount _must_ be raw, i.e. in the native representation\r\n  protected constructor(currency: Currency, amount: BigintIsh) {\r\n    const parsedAmount = parseBigintIsh(amount)\r\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\r\n\r\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\r\n    this.currency = currency\r\n  }\r\n\r\n  public get raw(): JSBI {\r\n    return this.numerator\r\n  }\r\n\r\n  public add(other: CurrencyAmount): CurrencyAmount {\r\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\r\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\r\n  }\r\n\r\n  public subtract(other: CurrencyAmount): CurrencyAmount {\r\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\r\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\r\n  }\r\n\r\n  public toSignificant(significantDigits = 6, format?: object, rounding: Rounding = Rounding.ROUND_DOWN): string {\r\n    return super.toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number = this.currency.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\r\n    return super.toFixed(decimalPlaces, format, rounding)\r\n  }\r\n\r\n  public toExact(format: object = { groupSeparator: '' }): string {\r\n    Big.DP = this.currency.decimals\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\r\n  }\r\n}\r\n","import { CurrencyAmount } from './currencyAmount'\r\nimport { Token } from '../token'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\n\r\nimport { BigintIsh } from '../../constants'\r\n\r\nexport class TokenAmount extends CurrencyAmount {\r\n  public readonly token: Token\r\n\r\n  // amount _must_ be raw, i.e. in the native representation\r\n  public constructor(token: Token, amount: BigintIsh) {\r\n    super(token, amount)\r\n    this.token = token\r\n  }\r\n\r\n  public add(other: TokenAmount): TokenAmount {\r\n    invariant(this.token.equals(other.token), 'TOKEN')\r\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\r\n  }\r\n\r\n  public subtract(other: TokenAmount): TokenAmount {\r\n    invariant(this.token.equals(other.token), 'TOKEN')\r\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\r\n  }\r\n}\r\n","import { Token } from '../token'\r\nimport { TokenAmount } from './tokenAmount'\r\nimport { currencyEquals } from '../token'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\n\r\nimport { BigintIsh, ChainId, Rounding, TEN } from '../../constants'\r\nimport { Currency } from '../currency'\r\nimport { Route } from '../route'\r\nimport { Fraction } from './fraction'\r\nimport { CurrencyAmount } from './currencyAmount'\r\n\r\nexport class Price extends Fraction {\r\n  public readonly baseCurrency: Currency // input i.e. denominator\r\n  public readonly quoteCurrency: Currency // output i.e. numerator\r\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\r\n\r\n  public static fromRoute(route: Route): Price {\r\n    const prices: Price[] = []\r\n    for (const [i, pair] of route.pairs.entries()) {\r\n      prices.push(\r\n        route.path[i].equals(pair.token0)\r\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\r\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\r\n      )\r\n    }\r\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\r\n  }\r\n\r\n  // denominator and numerator _must_ be raw, i.e. in the native representation\r\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\r\n    super(numerator, denominator)\r\n\r\n    this.baseCurrency = baseCurrency\r\n    this.quoteCurrency = quoteCurrency\r\n    this.scalar = new Fraction(\r\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\r\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\r\n    )\r\n  }\r\n\r\n  public get raw(): Fraction {\r\n    return new Fraction(this.numerator, this.denominator)\r\n  }\r\n\r\n  public get adjusted(): Fraction {\r\n    return super.multiply(this.scalar)\r\n  }\r\n\r\n  public invert(): Price {\r\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\r\n  }\r\n\r\n  public multiply(other: Price): Price {\r\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\r\n    const fraction = super.multiply(other)\r\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\r\n  }\r\n\r\n  // performs floor division on overflow\r\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\r\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\r\n    if (this.quoteCurrency instanceof Token) {\r\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\r\n    }\r\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient, ChainId.HECO_MAINNET)\r\n  }\r\n\r\n  public toSignificant(significantDigits = 6, format?: object, rounding?: Rounding): string {\r\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces = 4, format?: object, rounding?: Rounding): string {\r\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import { Price } from './fractions/price'\r\nimport { TokenAmount } from './fractions/tokenAmount'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport { pack, keccak256 } from '@ethersproject/solidity'\r\nimport { getCreate2Address } from '@ethersproject/address'\r\n\r\nimport {\r\n  BigintIsh,\r\n  MINIMUM_LIQUIDITY,\r\n  ZERO,\r\n  ONE,\r\n  FIVE,\r\n  _998,\r\n  _1000,\r\n  ChainId,\r\n  FACTORY_ADDRESS,\r\n  INIT_CODE_HASH\r\n} from '../constants'\r\nimport { sqrt, parseBigintIsh } from '../utils'\r\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\r\nimport { Token } from './token'\r\n\r\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\r\n\r\nexport class Pair {\r\n  public readonly liquidityToken: Token\r\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\r\n\r\n  public static getAddress(tokenA: Token, tokenB: Token): string {\r\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\r\n\r\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\r\n      PAIR_ADDRESS_CACHE = {\r\n        ...PAIR_ADDRESS_CACHE,\r\n        [tokens[0].address]: {\r\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\r\n          [tokens[1].address]: getCreate2Address(\r\n            FACTORY_ADDRESS[tokens[0].chainId],\r\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\r\n            INIT_CODE_HASH[tokens[0].chainId]\r\n          )\r\n        }\r\n      }\r\n    }\r\n\r\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\r\n  }\r\n\r\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\r\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\r\n      ? [tokenAmountA, tokenAmountB]\r\n      : [tokenAmountB, tokenAmountA]\r\n    this.liquidityToken = new Token(\r\n      tokenAmounts[0].token.chainId,\r\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\r\n      18,\r\n      'UNI-V2',\r\n      'Uniswap V2'\r\n    )\r\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\r\n  }\r\n\r\n  /**\r\n   * Returns true if the token is either token0 or token1\r\n   * @param token to check\r\n   */\r\n  public involvesToken(token: Token): boolean {\r\n    return token.equals(this.token0) || token.equals(this.token1)\r\n  }\r\n\r\n  /**\r\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\r\n   */\r\n  public get token0Price(): Price {\r\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\r\n  }\r\n\r\n  /**\r\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\r\n   */\r\n  public get token1Price(): Price {\r\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\r\n  }\r\n\r\n  /**\r\n   * Return the price of the given token in terms of the other token in the pair.\r\n   * @param token token to return price of\r\n   */\r\n  public priceOf(token: Token): Price {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\r\n  }\r\n\r\n  /**\r\n   * Returns the chain ID of the tokens in the pair.\r\n   */\r\n  public get chainId(): ChainId {\r\n    return this.token0.chainId\r\n  }\r\n\r\n  public get token0(): Token {\r\n    return this.tokenAmounts[0].token\r\n  }\r\n\r\n  public get token1(): Token {\r\n    return this.tokenAmounts[1].token\r\n  }\r\n\r\n  public get reserve0(): TokenAmount {\r\n    return this.tokenAmounts[0]\r\n  }\r\n\r\n  public get reserve1(): TokenAmount {\r\n    return this.tokenAmounts[1]\r\n  }\r\n\r\n  public reserveOf(token: Token): TokenAmount {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\r\n  }\r\n\r\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\r\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\r\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\r\n      throw new InsufficientReservesError()\r\n    }\r\n    const inputReserve = this.reserveOf(inputAmount.token)\r\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\r\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _998)\r\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\r\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\r\n    const outputAmount = new TokenAmount(\r\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\r\n      JSBI.divide(numerator, denominator)\r\n    )\r\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\r\n      throw new InsufficientInputAmountError()\r\n    }\r\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\r\n  }\r\n\r\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\r\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\r\n    if (\r\n      JSBI.equal(this.reserve0.raw, ZERO) ||\r\n      JSBI.equal(this.reserve1.raw, ZERO) ||\r\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\r\n    ) {\r\n      throw new InsufficientReservesError()\r\n    }\r\n\r\n    const outputReserve = this.reserveOf(outputAmount.token)\r\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\r\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\r\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _998)\r\n    const inputAmount = new TokenAmount(\r\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\r\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\r\n    )\r\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\r\n  }\r\n\r\n  public getLiquidityMinted(\r\n    totalSupply: TokenAmount,\r\n    tokenAmountA: TokenAmount,\r\n    tokenAmountB: TokenAmount\r\n  ): TokenAmount {\r\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\r\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\r\n      ? [tokenAmountA, tokenAmountB]\r\n      : [tokenAmountB, tokenAmountA]\r\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\r\n\r\n    let liquidity: JSBI\r\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\r\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\r\n    } else {\r\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\r\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\r\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\r\n    }\r\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\r\n      throw new InsufficientInputAmountError()\r\n    }\r\n    return new TokenAmount(this.liquidityToken, liquidity)\r\n  }\r\n\r\n  public getLiquidityValue(\r\n    token: Token,\r\n    totalSupply: TokenAmount,\r\n    liquidity: TokenAmount,\r\n    feeOn = false,\r\n    kLast?: BigintIsh\r\n  ): TokenAmount {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\r\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\r\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\r\n\r\n    let totalSupplyAdjusted: TokenAmount\r\n    if (!feeOn) {\r\n      totalSupplyAdjusted = totalSupply\r\n    } else {\r\n      invariant(!!kLast, 'K_LAST')\r\n      const kLastParsed = parseBigintIsh(kLast)\r\n      if (!JSBI.equal(kLastParsed, ZERO)) {\r\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\r\n        const rootKLast = sqrt(kLastParsed)\r\n        if (JSBI.greaterThan(rootK, rootKLast)) {\r\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\r\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\r\n          const feeLiquidity = JSBI.divide(numerator, denominator)\r\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\r\n        } else {\r\n          totalSupplyAdjusted = totalSupply\r\n        }\r\n      } else {\r\n        totalSupplyAdjusted = totalSupply\r\n      }\r\n    }\r\n\r\n    return new TokenAmount(\r\n      token,\r\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\r\n    )\r\n  }\r\n}\r\n","import { ChainId } from '../constants'\r\nimport invariant from 'tiny-invariant'\r\n\r\nimport { Currency, ETHER } from './currency'\r\nimport { Token, WETH } from './token'\r\nimport { Pair } from './pair'\r\nimport { Price } from './fractions/price'\r\n\r\nexport class Route {\r\n  public readonly pairs: Pair[]\r\n  public readonly path: Token[]\r\n  public readonly input: Currency\r\n  public readonly output: Currency\r\n  public readonly midPrice: Price\r\n\r\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(\r\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\r\n      'CHAIN_IDS'\r\n    )\r\n    invariant(\r\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\r\n        (input === ETHER(pairs[0].chainId) && pairs[0].involvesToken(WETH[pairs[0].chainId])),\r\n      'INPUT'\r\n    )\r\n    invariant(\r\n      typeof output === 'undefined' ||\r\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\r\n        (output === ETHER(pairs[0].chainId) && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\r\n      'OUTPUT'\r\n    )\r\n\r\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\r\n    for (const [i, pair] of pairs.entries()) {\r\n      const currentInput = path[i]\r\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\r\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\r\n      path.push(output)\r\n    }\r\n\r\n    this.pairs = pairs\r\n    this.path = path\r\n    this.midPrice = Price.fromRoute(this)\r\n    this.input = input\r\n    this.output = output ?? path[path.length - 1]\r\n  }\r\n\r\n  public get chainId(): ChainId {\r\n    return this.pairs[0].chainId\r\n  }\r\n}\r\n","import { Rounding, _100 } from '../../constants'\r\nimport { Fraction } from './fraction'\r\n\r\nconst _100_PERCENT = new Fraction(_100)\r\n\r\nexport class Percent extends Fraction {\r\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\r\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\r\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\n\r\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\r\nimport { sortedInsert } from '../utils'\r\nimport { Currency, ETHER } from './currency'\r\nimport { CurrencyAmount } from './fractions/currencyAmount'\r\nimport { Fraction } from './fractions/fraction'\r\nimport { Percent } from './fractions/percent'\r\nimport { Price } from './fractions/price'\r\nimport { TokenAmount } from './fractions/tokenAmount'\r\nimport { Pair } from './pair'\r\nimport { Route } from './route'\r\nimport { currencyEquals, Token, WETH } from './token'\r\n\r\n/**\r\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\r\n * @param midPrice mid price before the trade\r\n * @param inputAmount the input amount of the trade\r\n * @param outputAmount the output amount of the trade\r\n */\r\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\r\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\r\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\r\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\r\n  return new Percent(slippage.numerator, slippage.denominator)\r\n}\r\n\r\n// minimal interface so the input output comparator may be shared across types\r\ninterface InputOutput {\r\n  readonly inputAmount: CurrencyAmount\r\n  readonly outputAmount: CurrencyAmount\r\n}\r\n\r\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\r\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\r\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\r\n  // must have same input and output token for comparison\r\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\r\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\r\n  if (a.outputAmount.equalTo(b.outputAmount)) {\r\n    if (a.inputAmount.equalTo(b.inputAmount)) {\r\n      return 0\r\n    }\r\n    // trade A requires less input than trade B, so A should come first\r\n    if (a.inputAmount.lessThan(b.inputAmount)) {\r\n      return -1\r\n    } else {\r\n      return 1\r\n    }\r\n  } else {\r\n    // tradeA has less output than trade B, so should come second\r\n    if (a.outputAmount.lessThan(b.outputAmount)) {\r\n      return 1\r\n    } else {\r\n      return -1\r\n    }\r\n  }\r\n}\r\n\r\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\r\nexport function tradeComparator(a: Trade, b: Trade) {\r\n  const ioComp = inputOutputComparator(a, b)\r\n  if (ioComp !== 0) {\r\n    return ioComp\r\n  }\r\n\r\n  // consider lowest slippage next, since these are less likely to fail\r\n  if (a.priceImpact.lessThan(b.priceImpact)) {\r\n    return -1\r\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\r\n    return 1\r\n  }\r\n\r\n  // finally consider the number of hops since each hop costs gas\r\n  return a.route.path.length - b.route.path.length\r\n}\r\n\r\nexport interface BestTradeOptions {\r\n  // how many results to return\r\n  maxNumResults?: number\r\n  // the maximum number of hops a trade should contain\r\n  maxHops?: number\r\n}\r\n\r\n/**\r\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\r\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\r\n * the input currency amount.\r\n */\r\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\r\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\r\n  if (currencyAmount.currency === ETHER(chainId)) return new TokenAmount(WETH[chainId], currencyAmount.raw)\r\n  invariant(false, 'CURRENCY')\r\n}\r\n\r\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\r\n  if (currency instanceof Token) return currency\r\n  if (currency === ETHER(chainId)) return WETH[chainId]\r\n  invariant(false, 'CURRENCY')\r\n}\r\n\r\n/**\r\n * Represents a trade executed against a list of pairs.\r\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\r\n */\r\nexport class Trade {\r\n  /**\r\n   * The route of the trade, i.e. which pairs the trade goes through.\r\n   */\r\n  public readonly route: Route\r\n  /**\r\n   * The type of the trade, either exact in or exact out.\r\n   */\r\n  public readonly tradeType: TradeType\r\n  /**\r\n   * The input amount for the trade assuming no slippage.\r\n   */\r\n  public readonly inputAmount: CurrencyAmount\r\n  /**\r\n   * The output amount for the trade assuming no slippage.\r\n   */\r\n  public readonly outputAmount: CurrencyAmount\r\n  /**\r\n   * The price expressed in terms of output amount/input amount.\r\n   */\r\n  public readonly executionPrice: Price\r\n  /**\r\n   * The mid price after the trade executes assuming no slippage.\r\n   */\r\n  public readonly nextMidPrice: Price\r\n  /**\r\n   * The percent difference between the mid price before the trade and the trade execution price.\r\n   */\r\n  public readonly priceImpact: Percent\r\n\r\n  /**\r\n   * Constructs an exact in trade with the given amount in and route\r\n   * @param route route of the exact in trade\r\n   * @param amountIn the amount being passed in\r\n   */\r\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\r\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\r\n  }\r\n\r\n  /**\r\n   * Constructs an exact out trade with the given amount out and route\r\n   * @param route route of the exact out trade\r\n   * @param amountOut the amount returned by the trade\r\n   */\r\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\r\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\r\n  }\r\n\r\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\r\n    const amounts: TokenAmount[] = new Array(route.path.length)\r\n    const nextPairs: Pair[] = new Array(route.pairs.length)\r\n    if (tradeType === TradeType.EXACT_INPUT) {\r\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\r\n      amounts[0] = wrappedAmount(amount, route.chainId)\r\n      for (let i = 0; i < route.path.length - 1; i++) {\r\n        const pair = route.pairs[i]\r\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\r\n        amounts[i + 1] = outputAmount\r\n        nextPairs[i] = nextPair\r\n      }\r\n    } else {\r\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\r\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\r\n      for (let i = route.path.length - 1; i > 0; i--) {\r\n        const pair = route.pairs[i - 1]\r\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\r\n        amounts[i - 1] = inputAmount\r\n        nextPairs[i - 1] = nextPair\r\n      }\r\n    }\r\n\r\n    this.route = route\r\n    this.tradeType = tradeType\r\n    this.inputAmount =\r\n      tradeType === TradeType.EXACT_INPUT\r\n        ? amount\r\n        : route.input === ETHER(route.chainId)\r\n        ? CurrencyAmount.ether(amounts[0].raw, route.chainId)\r\n        : amounts[0]\r\n    this.outputAmount =\r\n      tradeType === TradeType.EXACT_OUTPUT\r\n        ? amount\r\n        : route.output === ETHER(route.chainId)\r\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw, route.chainId)\r\n        : amounts[amounts.length - 1]\r\n    this.executionPrice = new Price(\r\n      this.inputAmount.currency,\r\n      this.outputAmount.currency,\r\n      this.inputAmount.raw,\r\n      this.outputAmount.raw\r\n    )\r\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\r\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\r\n  }\r\n\r\n  /**\r\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\r\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\r\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\r\n      return this.outputAmount\r\n    } else {\r\n      const slippageAdjustedAmountOut = new Fraction(ONE)\r\n        .add(slippageTolerance)\r\n        .invert()\r\n        .multiply(this.outputAmount.raw).quotient\r\n      return this.outputAmount instanceof TokenAmount\r\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\r\n        : CurrencyAmount.ether(slippageAdjustedAmountOut, this.route.chainId)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\r\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\r\n    if (this.tradeType === TradeType.EXACT_INPUT) {\r\n      return this.inputAmount\r\n    } else {\r\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\r\n      return this.inputAmount instanceof TokenAmount\r\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\r\n        : CurrencyAmount.ether(slippageAdjustedAmountIn, this.route.chainId)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\r\n   * amount to an output token, making at most `maxHops` hops.\r\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyAmountIn exact amount of input currency to spend\r\n   * @param currencyOut the desired currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\r\n  public static bestTradeExactIn(\r\n    pairs: Pair[],\r\n    currencyAmountIn: CurrencyAmount,\r\n    currencyOut: Currency,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPairs: Pair[] = [],\r\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\r\n    bestTrades: Trade[] = []\r\n  ): Trade[] {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(maxHops > 0, 'MAX_HOPS')\r\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\r\n    const chainId: ChainId | undefined =\r\n      currencyAmountIn instanceof TokenAmount\r\n        ? currencyAmountIn.token.chainId\r\n        : currencyOut instanceof Token\r\n        ? currencyOut.chainId\r\n        : undefined\r\n    invariant(chainId !== undefined, 'CHAIN_ID')\r\n\r\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\r\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      const pair = pairs[i]\r\n      // pair irrelevant\r\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\r\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\r\n\r\n      let amountOut: TokenAmount\r\n      try {\r\n        ;[amountOut] = pair.getOutputAmount(amountIn)\r\n      } catch (error) {\r\n        // input too low\r\n        if (error.isInsufficientInputAmountError) {\r\n          continue\r\n        }\r\n        throw error\r\n      }\r\n      // we have arrived at the output token, so this is the final trade of one of the paths\r\n      if (amountOut.token.equals(tokenOut)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          new Trade(\r\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\r\n            originalAmountIn,\r\n            TradeType.EXACT_INPUT\r\n          ),\r\n          maxNumResults,\r\n          tradeComparator\r\n        )\r\n      } else if (maxHops > 1 && pairs.length > 1) {\r\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\r\n\r\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\r\n        Trade.bestTradeExactIn(\r\n          pairsExcludingThisPair,\r\n          amountOut,\r\n          currencyOut,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1\r\n          },\r\n          [...currentPairs, pair],\r\n          originalAmountIn,\r\n          bestTrades\r\n        )\r\n      }\r\n    }\r\n\r\n    return bestTrades\r\n  }\r\n\r\n  /**\r\n   * similar to the above method but instead targets a fixed output amount\r\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\r\n   * to an output token amount, making at most `maxHops` hops\r\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyIn the currency to spend\r\n   * @param currencyAmountOut the exact amount of currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\r\n  public static bestTradeExactOut(\r\n    pairs: Pair[],\r\n    currencyIn: Currency,\r\n    currencyAmountOut: CurrencyAmount,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPairs: Pair[] = [],\r\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\r\n    bestTrades: Trade[] = []\r\n  ): Trade[] {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(maxHops > 0, 'MAX_HOPS')\r\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\r\n    const chainId: ChainId | undefined =\r\n      currencyAmountOut instanceof TokenAmount\r\n        ? currencyAmountOut.token.chainId\r\n        : currencyIn instanceof Token\r\n        ? currencyIn.chainId\r\n        : undefined\r\n    invariant(chainId !== undefined, 'CHAIN_ID')\r\n\r\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\r\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      const pair = pairs[i]\r\n      // pair irrelevant\r\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\r\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\r\n\r\n      let amountIn: TokenAmount\r\n      try {\r\n        ;[amountIn] = pair.getInputAmount(amountOut)\r\n      } catch (error) {\r\n        // not enough liquidity in this pair\r\n        if (error.isInsufficientReservesError) {\r\n          continue\r\n        }\r\n        throw error\r\n      }\r\n      // we have arrived at the input token, so this is the first trade of one of the paths\r\n      if (amountIn.token.equals(tokenIn)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          new Trade(\r\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\r\n            originalAmountOut,\r\n            TradeType.EXACT_OUTPUT\r\n          ),\r\n          maxNumResults,\r\n          tradeComparator\r\n        )\r\n      } else if (maxHops > 1 && pairs.length > 1) {\r\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\r\n\r\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\r\n        Trade.bestTradeExactOut(\r\n          pairsExcludingThisPair,\r\n          currencyIn,\r\n          amountIn,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1\r\n          },\r\n          [pair, ...currentPairs],\r\n          originalAmountOut,\r\n          bestTrades\r\n        )\r\n      }\r\n    }\r\n\r\n    return bestTrades\r\n  }\r\n}\r\n","import { ChainId, TradeType } from './constants'\r\nimport invariant from 'tiny-invariant'\r\nimport { validateAndParseAddress } from './utils'\r\nimport { CurrencyAmount, HT, OKT, Percent, Trade } from './entities'\r\n\r\n/**\r\n * Options for producing the arguments to send call to the router.\r\n */\r\nexport interface TradeOptions {\r\n  /**\r\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\r\n   */\r\n  allowedSlippage: Percent\r\n  /**\r\n   * How long the swap is valid until it expires, in seconds.\r\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\r\n   * are generated.\r\n   */\r\n  ttl: number\r\n  /**\r\n   * The account that should receive the output of the swap.\r\n   */\r\n  recipient: string\r\n\r\n  /**\r\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\r\n   */\r\n  feeOnTransfer?: boolean\r\n}\r\n\r\n/**\r\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\r\n */\r\nexport interface SwapParameters {\r\n  /**\r\n   * The method to call on the Uniswap V2 Router.\r\n   */\r\n  methodName: string\r\n  /**\r\n   * The arguments to pass to the method, all hex encoded.\r\n   */\r\n  args: (string | string[])[]\r\n  /**\r\n   * The amount of wei to send in hex.\r\n   */\r\n  value: string\r\n}\r\n\r\nfunction toHex(currencyAmount: CurrencyAmount) {\r\n  return `0x${currencyAmount.raw.toString(16)}`\r\n}\r\n\r\nconst ZERO_HEX = '0x0'\r\n\r\n/**\r\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\r\n */\r\nexport abstract class Router {\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n  private constructor() {}\r\n  /**\r\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\r\n   * @param trade to produce call parameters for\r\n   * @param options options for the call parameters\r\n   */\r\n  public static swapCallParameters(trade: Trade, options: TradeOptions): SwapParameters {\r\n    const nativeToken = trade.route.chainId === ChainId.HECO_MAINNET ? HT : OKT\r\n    const etherIn = trade.inputAmount.currency === nativeToken\r\n    const etherOut = trade.outputAmount.currency === nativeToken\r\n    // the router does not support both ether in and out\r\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\r\n    invariant(options.ttl > 0, 'TTL')\r\n\r\n    const to: string = validateAndParseAddress(options.recipient)\r\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\r\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\r\n    const path: string[] = trade.route.path.map(token => token.address)\r\n    const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\r\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\r\n\r\n    let methodName: string\r\n    let args: (string | string[])[]\r\n    let value: string\r\n    switch (trade.tradeType) {\r\n      case TradeType.EXACT_INPUT:\r\n        if (etherIn) {\r\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\r\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, path, to, deadline]\r\n          value = amountIn\r\n        } else if (etherOut) {\r\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\r\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountIn, amountOut, path, to, deadline]\r\n          value = ZERO_HEX\r\n        } else {\r\n          methodName = useFeeOnTransfer\r\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\r\n            : 'swapExactTokensForTokens'\r\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountIn, amountOut, path, to, deadline]\r\n          value = ZERO_HEX\r\n        }\r\n        break\r\n      case TradeType.EXACT_OUTPUT:\r\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\r\n        if (etherIn) {\r\n          methodName = 'swapETHForExactTokens'\r\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, path, to, deadline]\r\n          value = amountIn\r\n        } else if (etherOut) {\r\n          methodName = 'swapTokensForExactETH'\r\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, amountIn, path, to, deadline]\r\n          value = ZERO_HEX\r\n        } else {\r\n          methodName = 'swapTokensForExactTokens'\r\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, amountIn, path, to, deadline]\r\n          value = ZERO_HEX\r\n        }\r\n        break\r\n    }\r\n    return {\r\n      methodName,\r\n      args,\r\n      value\r\n    }\r\n  }\r\n}\r\n","import { Contract } from '@ethersproject/contracts'\r\nimport { getNetwork } from '@ethersproject/networks'\r\nimport { getDefaultProvider } from '@ethersproject/providers'\r\nimport { TokenAmount } from './entities/fractions/tokenAmount'\r\nimport { Pair } from './entities/pair'\r\nimport IPancakePair from '@pancakeswap-libs/pancake-swap-core/build/IPancakePair.json'\r\nimport invariant from 'tiny-invariant'\r\nimport ERC20 from './abis/ERC20.json'\r\nimport { ChainId } from './constants'\r\nimport { Token } from './entities/token'\r\n\r\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\r\n  [ChainId.HECO_MAINNET]: {\r\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\r\n  }\r\n}\r\n\r\n/**\r\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\r\n */\r\nexport abstract class Fetcher {\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n  private constructor() {}\r\n\r\n  /**\r\n   * Fetch information for a given token on the given chain, using the given ethers provider.\r\n   * @param chainId chain of the token\r\n   * @param address address of the token on the chain\r\n   * @param provider provider used to fetch the token\r\n   * @param symbol optional symbol of the token\r\n   * @param name optional name of the token\r\n   */\r\n  public static async fetchTokenData(\r\n    chainId: ChainId,\r\n    address: string,\r\n    provider = getDefaultProvider(getNetwork(chainId)),\r\n    symbol?: string,\r\n    name?: string\r\n  ): Promise<Token> {\r\n    const parsedDecimals =\r\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\r\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\r\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\r\n            TOKEN_DECIMALS_CACHE = {\r\n              ...TOKEN_DECIMALS_CACHE,\r\n              [chainId]: {\r\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\r\n                [address]: decimals\r\n              }\r\n            }\r\n            return decimals\r\n          })\r\n    return new Token(chainId, address, parsedDecimals, symbol, name)\r\n  }\r\n\r\n  /**\r\n   * Fetches information about a pair and constructs a pair from the given two tokens.\r\n   * @param tokenA first token\r\n   * @param tokenB second token\r\n   * @param provider the provider to use to fetch the data\r\n   */\r\n  public static async fetchPairData(\r\n    tokenA: Token,\r\n    tokenB: Token,\r\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\r\n  ): Promise<Pair> {\r\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\r\n    const address = Pair.getAddress(tokenA, tokenB)\r\n    const [reserves0, reserves1] = await new Contract(address, IPancakePair.abi, provider).getReserves()\r\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\r\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\r\n  }\r\n}\r\n"],"names":["ChainId","TradeType","Rounding","SolidityType","FACTORY_ADDRESS","HECO_MAINNET","HECO_TESTNET","OEC_MAINNET","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_998","_1000","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","_this","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","_this2","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","getAddress","error","parseBigintIsh","bigintIsh","toString","sqrt","y","x","z","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","ETHER","chainId","HT","OKT","Token","equals","other","this","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","amount","parsedAmount","exponentiate","ether","raw","toExact","TokenAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","_Fraction","adjusted","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","undefined","_PAIR_ADDRESS_CACHE2","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","exactQuote","slippage","amounts","Array","nextPairs","EXACT_INPUT","i","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","toHex","Router","swapCallParameters","trade","options","nativeToken","etherIn","etherOut","ttl","methodName","args","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","_TOKEN_DECIMALS_CACHE2","_TOKEN_DECIMALS_CACHE3","Contract","ERC20","then","_TOKEN_DECIMALS_CACHE4","fetchPairData","IPancakePair","abi","getReserves","reserves0","reserves1","balances"],"mappings":"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"}